#![doc = "Peripheral access API for FE310 microcontrollers (generated using svd2rust v0.37.0 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.37.0/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
#![cfg_attr(docsrs, feature(doc_auto_cfg))]
#[allow(unused_imports)]
use generic::*;
#[doc = "Common register and bit access and modify traits"]
pub mod generic;
#[doc = r" Interrupt numbers, priority levels, and HART IDs."]
pub mod interrupt;
riscv_peripheral :: clint_codegen ! (Clint , base 0x2000000 , mtime_freq 32768 , harts [crate :: interrupt :: Hart :: H0 => 0]);
impl Clint {
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    #[inline]
    pub unsafe fn steal() -> Self {
        Self::new()
    }
}
riscv_peripheral :: plic_codegen ! (Plic , base 0xC000000 , harts [crate :: interrupt :: Hart :: H0 => 0]);
impl Plic {
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    #[inline]
    pub unsafe fn steal() -> Self {
        Self::new()
    }
}
#[doc = "Watchdog"]
pub type Wdog = crate::Periph<wdog::RegisterBlock, 0x1000_0000>;
impl core::fmt::Debug for Wdog {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Wdog").finish()
    }
}
#[doc = "Watchdog"]
pub mod wdog;
#[doc = "Watchdog"]
pub type Rtc = crate::Periph<rtc::RegisterBlock, 0x1000_0000>;
impl core::fmt::Debug for Rtc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rtc").finish()
    }
}
#[doc = "Watchdog"]
pub mod rtc;
#[doc = "Always-On Clock Configuration"]
pub type Aonclk = crate::Periph<aonclk::RegisterBlock, 0x1000_0000>;
impl core::fmt::Debug for Aonclk {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Aonclk").finish()
    }
}
#[doc = "Always-On Clock Configuration"]
pub mod aonclk;
#[doc = "Backup Registers"]
pub type Backup = crate::Periph<backup::RegisterBlock, 0x1000_0000>;
impl core::fmt::Debug for Backup {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Backup").finish()
    }
}
#[doc = "Backup Registers"]
pub mod backup;
#[doc = "PMU"]
pub type Pmu = crate::Periph<pmu::RegisterBlock, 0x1000_0000>;
impl core::fmt::Debug for Pmu {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pmu").finish()
    }
}
#[doc = "PMU"]
pub mod pmu;
#[doc = "Power Reset Clock Interrupts"]
pub type Prci = crate::Periph<prci::RegisterBlock, 0x1000_8000>;
impl core::fmt::Debug for Prci {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Prci").finish()
    }
}
#[doc = "Power Reset Clock Interrupts"]
pub mod prci;
#[doc = "One Time Programmable Memory"]
pub type Otp = crate::Periph<otp::RegisterBlock, 0x1001_0000>;
impl core::fmt::Debug for Otp {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Otp").finish()
    }
}
#[doc = "One Time Programmable Memory"]
pub mod otp;
#[doc = "General Purpose Input Output"]
pub type Gpio0 = crate::Periph<gpio0::RegisterBlock, 0x1001_2000>;
impl core::fmt::Debug for Gpio0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpio0").finish()
    }
}
#[doc = "General Purpose Input Output"]
pub mod gpio0;
#[doc = "Universal Asynchronous Receiver Transmitter"]
pub type Uart0 = crate::Periph<uart0::RegisterBlock, 0x1001_3000>;
impl core::fmt::Debug for Uart0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart0").finish()
    }
}
#[doc = "Universal Asynchronous Receiver Transmitter"]
pub mod uart0;
#[doc = "Quad Serial Peripheral Interface"]
pub type Qspi0 = crate::Periph<qspi0::RegisterBlock, 0x1001_4000>;
impl core::fmt::Debug for Qspi0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Qspi0").finish()
    }
}
#[doc = "Quad Serial Peripheral Interface"]
pub mod qspi0;
#[doc = "8-bit timer with 4 cmp"]
pub type Pwm0 = crate::Periph<pwm0::RegisterBlock, 0x1001_5000>;
impl core::fmt::Debug for Pwm0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pwm0").finish()
    }
}
#[doc = "8-bit timer with 4 cmp"]
pub mod pwm0;
#[doc = "Inter-Integrated Circuit Master Interface (FE310-G002 only)"]
#[cfg(feature = "g002")]
pub type I2c0 = crate::Periph<i2c0::RegisterBlock, 0x1001_6000>;
#[cfg(feature = "g002")]
impl core::fmt::Debug for I2c0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c0").finish()
    }
}
#[doc = "Inter-Integrated Circuit Master Interface (FE310-G002 only)"]
#[cfg(feature = "g002")]
pub mod i2c0;
#[doc = "Universal Asynchronous Receiver Transmitter"]
pub type Uart1 = crate::Periph<uart0::RegisterBlock, 0x1002_3000>;
impl core::fmt::Debug for Uart1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart1").finish()
    }
}
#[doc = "Universal Asynchronous Receiver Transmitter"]
pub use self::uart0 as uart1;
#[doc = "Quad Serial Peripheral Interface"]
pub type Qspi1 = crate::Periph<qspi0::RegisterBlock, 0x1002_4000>;
impl core::fmt::Debug for Qspi1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Qspi1").finish()
    }
}
#[doc = "Quad Serial Peripheral Interface"]
pub use self::qspi0 as qspi1;
#[doc = "8-bit timer with 4 cmp"]
pub type Pwm1 = crate::Periph<pwm0::RegisterBlock, 0x1002_5000>;
impl core::fmt::Debug for Pwm1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pwm1").finish()
    }
}
#[doc = "8-bit timer with 4 cmp"]
pub use self::pwm0 as pwm1;
#[doc = "Quad Serial Peripheral Interface"]
pub type Qspi2 = crate::Periph<qspi0::RegisterBlock, 0x1003_4000>;
impl core::fmt::Debug for Qspi2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Qspi2").finish()
    }
}
#[doc = "Quad Serial Peripheral Interface"]
pub use self::qspi0 as qspi2;
#[doc = "8-bit timer with 4 cmp"]
pub type Pwm2 = crate::Periph<pwm0::RegisterBlock, 0x1003_5000>;
impl core::fmt::Debug for Pwm2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pwm2").finish()
    }
}
#[doc = "8-bit timer with 4 cmp"]
pub use self::pwm0 as pwm2;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "CLINT"]
    pub clint: Clint,
    #[doc = "PLIC"]
    pub plic: Plic,
    #[doc = "WDOG"]
    pub wdog: Wdog,
    #[doc = "RTC"]
    pub rtc: Rtc,
    #[doc = "AONCLK"]
    pub aonclk: Aonclk,
    #[doc = "BACKUP"]
    pub backup: Backup,
    #[doc = "PMU"]
    pub pmu: Pmu,
    #[doc = "PRCI"]
    pub prci: Prci,
    #[doc = "OTP"]
    pub otp: Otp,
    #[doc = "GPIO0"]
    pub gpio0: Gpio0,
    #[doc = "UART0"]
    pub uart0: Uart0,
    #[doc = "QSPI0"]
    pub qspi0: Qspi0,
    #[doc = "PWM0"]
    pub pwm0: Pwm0,
    #[doc = "I2C0"]
    #[cfg(feature = "g002")]
    pub i2c0: I2c0,
    #[doc = "UART1"]
    pub uart1: Uart1,
    #[doc = "QSPI1"]
    pub qspi1: Qspi1,
    #[doc = "PWM1"]
    pub pwm1: Pwm1,
    #[doc = "QSPI2"]
    pub qspi2: Qspi2,
    #[doc = "PWM2"]
    pub pwm2: Pwm2,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            clint: Clint::steal(),
            plic: Plic::steal(),
            wdog: Wdog::steal(),
            rtc: Rtc::steal(),
            aonclk: Aonclk::steal(),
            backup: Backup::steal(),
            pmu: Pmu::steal(),
            prci: Prci::steal(),
            otp: Otp::steal(),
            gpio0: Gpio0::steal(),
            uart0: Uart0::steal(),
            qspi0: Qspi0::steal(),
            pwm0: Pwm0::steal(),
            #[cfg(feature = "g002")]
            i2c0: I2c0::steal(),
            uart1: Uart1::steal(),
            qspi1: Qspi1::steal(),
            pwm1: Pwm1::steal(),
            qspi2: Qspi2::steal(),
            pwm2: Pwm2::steal(),
        }
    }
}
